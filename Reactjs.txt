Beginner
1.	What is React?
o	 : React is a JavaScript library for building user interfaces, particularly single-page applications. It allows developers to create reusable UI components.
2.	Explain JSX and how it works.
o	 : JSX (JavaScript XML) is a syntax extension for JavaScript that looks similar to HTML. It allows you to write HTML within JavaScript, which React converts to React elements using React.createElement() during compilation.
3.	What is the virtual DOM, and how does it work?
o	 : The virtual DOM is a lightweight copy of the real DOM. React uses it to detect changes in the UI by comparing it with the actual DOM. Once changes are identified, React updates only the changed parts, making the process faster.
4.	What are components in React?
o	 : Components are the building blocks of a React application. They are reusable, self-contained pieces of code that return elements to be rendered on the page.
5.	Explain the difference between functional and class components.
o	 : Functional components are JavaScript functions that accept props and return JSX. Class components are ES6 classes that extend React.Component and can use state and lifecycle methods.
Intermediate
6.	What is state in React, and how is it different from props?
o	 : State is a built-in object used to hold data that may change over time. It is managed within the component. Props, on the other hand, are read-only properties passed from parent to child components.
7.	How does React handle events?
o	 : React uses synthetic events, which are cross-browser wrappers around native events. Event handling in React is similar to HTML but uses camelCase (e.g., onClick) instead of lowercase.
8.	What is the use of useEffect in React?
o	 : useEffect is a hook that lets you perform side effects (such as data fetching or DOM manipulation) in functional components. It runs after the component mounts and can be set to run on specific dependencies or at every render.
9.	Explain conditional rendering in React.
o	 : Conditional rendering is a way to render different components or elements based on a condition. This can be achieved using JavaScript conditional statements like if, else, ternary operators, or logical &&.
10.	What is the Context API, and when would you use it?
o	 : The Context API provides a way to pass data through the component tree without manually passing props. It’s useful for managing global state, like user authentication status or theme, across deeply nested components.


Advanced
11.	What are Higher-Order Components (HOCs) in React?
o	 : HOCs are functions that take a component and return a new component, enhancing it with additional functionality. They are commonly used for code reuse, logic, and side effects between components.
12.	Explain the purpose of React.memo.
o	 : React.memo is a higher-order component that prevents a functional component from re-rendering if its props haven’t changed. It helps optimize performance by reducing unnecessary renders.
13.	What is reconciliation in React?
o	 : Reconciliation is React’s process of updating the DOM when the state or props change. React compares the new virtual DOM with the previous one and updates only the parts of the actual DOM that changed.
14.	How do error boundaries work in React?
o	 : Error boundaries are React components that catch JavaScript errors in their child components’ lifecycle methods. They prevent the entire application from crashing and allow graceful error handling.
15.	Describe the use of lazy loading in React.
o	 : Lazy loading in React is used to load components only when they’re needed, improving performance. It’s done using React.lazy and Suspense, allowing parts of the UI to load asynchronously.

