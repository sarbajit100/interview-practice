Basic Django Questions
What is Django?

Django is a high-level Python web framework that promotes rapid development and clean, pragmatic design. It follows the Model-View-Template (MVT) architectural pattern.
What are the main features of Django?

Batteries-included framework: Comes with features like ORM, admin interface, authentication, and middleware.
Scalability, security, and reusability.
Built-in tools for URL routing, form handling, and templating.
What is the difference between MVT and MVC?

In Django:
Model: Data structure (database schema).
View: Business logic.
Template: Presentation layer (UI).
The controller in MVC is handled by Django itself via URL resolvers and middleware.
How do you create a Django project?

Command:
bash
Copy code
django-admin startproject project_name
How do you create a Django application?

Command:
bash
Copy code
python manage.py startapp app_name
Intermediate Django Questions
What is Django ORM?

Django’s Object-Relational Mapping (ORM) is used to interact with databases using Python code instead of SQL queries.
How do you define a model in Django?

Example:
python
Copy code
from django.db import models

class Book(models.Model):
    title = models.CharField(max_length=100)
    author = models.CharField(max_length=50)
    published_date = models.DateField()
How do you run database migrations in Django?

Commands:
bash
Copy code
python manage.py makemigrations
python manage.py migrate
What is Django’s admin interface, and how do you use it?

The Django admin interface provides an automatically generated backend to manage models.
Register models:
python
Copy code
from django.contrib import admin
from .models import Book

admin.site.register(Book)
How does Django handle static files?

Define STATIC_URL in settings.py.
Collect static files:
bash
Copy code
python manage.py collectstatic
What is the difference between @login_required and @permission_required decorators?

@login_required: Restricts access to authenticated users.
@permission_required: Restricts access to users with specific permissions.
Advanced Django Questions
What are middleware in Django?

Middleware are hooks into Django’s request/response processing.
Example:
python
Copy code
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
]
What are signals in Django?

Signals allow decoupled components to communicate.
Example:
python
Copy code
from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import Book

@receiver(post_save, sender=Book)
def book_saved(sender, instance, **kwargs):
    print(f"Book '{instance.title}' saved!")
What is Django Rest Framework (DRF)?

DRF is a powerful library for building RESTful APIs in Django.
Provides features like serializers, viewsets, and routers.
What is the purpose of Django’s settings.py file?

settings.py contains configurations such as database connections, static files, installed apps, and middleware.
Authentication and Security
How do you implement user authentication in Django?

Django provides built-in authentication:
django.contrib.auth module.
Use login and logout views:
python
Copy code
from django.contrib.auth import login, logout
What are CSRF tokens, and why are they important in Django?

CSRF (Cross-Site Request Forgery) tokens prevent unauthorized actions by ensuring requests come from authenticated users.
How do you create custom user models in Django?

Example:
python
Copy code
from django.contrib.auth.models import AbstractUser

class CustomUser(AbstractUser):
    phone_number = models.CharField(max_length=15)
How do you handle passwords in Django?

Use Django’s make_password and check_password functions or built-in forms like UserCreationForm.
Performance Optimization
How do you optimize database queries in Django?

Use methods like select_related, prefetch_related, and annotate.
Example:
python
Copy code
books = Book.objects.select_related('author').all()
What is caching in Django?

Caching stores data temporarily to improve performance.
Backend options:
In-memory cache (Memcached, Redis).
File-based cache.
What is the difference between @transaction.atomic and @transaction.non_atomic_requests?

@transaction.atomic: Ensures all database operations in the block are atomic.
@transaction.non_atomic_requests: Skips atomic behavior for a specific view.
Testing in Django
How do you write tests in Django?

Example:
python
Copy code
from django.test import TestCase
from .models import Book

class BookTestCase(TestCase):
    def test_book_creation(self):
        book = Book.objects.create(title="Test", author="Author")
        self.assertEqual(book.title, "Test")
What is Django’s TestClient?

A tool for simulating HTTP requests in tests.
What is the purpose of pytest-django?

pytest-django is a plugin for using pytest with Django projects for more advanced testing capabilities.
Deployment and Scaling
How do you deploy a Django project?

Use a WSGI server like Gunicorn or uWSGI.
Set up a web server like Nginx or Apache as a reverse proxy.
Use a production database (e.g., PostgreSQL).
Serve static files using a CDN or Nginx.
How do you scale a Django application?

Use caching (Redis or Memcached).
Load balancing.
Database optimization with indexes.
Asynchronous task queues (e.g., Celery).
Scenario-Based Questions
How would you create a RESTful API in Django?

Use Django Rest Framework (DRF):
python
Copy code
from rest_framework.views import APIView
from rest_framework.response import Response

class MyAPI(APIView):
    def get(self, request):
        return Response({"message": "Hello, world!"})
How do you manage file uploads in Django?

Use Django’s FileField or ImageField:
python
Copy code
class Document(models.Model):
    file = models.FileField(upload_to='uploads/')
How would you implement custom permissions in Django?

Example:
python
Copy code
from rest_framework.permissions import BasePermission

class IsAdminPermission(BasePermission):
    def has_permission(self, request, view):
        return request.user.is_staff

